{"version":3,"sources":["colors.jsx","App.js","serviceWorker.js","index.js"],"names":["colorArray","g_quotes","g_author","g_coding_quotes","spinner","document","getElementById","hideSpinner","className","replace","Quetes","name","author","getAPIResult","color","box_style","width","height","backgroundColor","margin","position","top","border","borderRadius","style","padding","fontWeight","fontSize","float","display","onClick","href","App","useState","text","setText","setAuthor","setColor","onBtnClick","event","target","id","fetch","then","res","json","en","item","Math","floor","random","length","content","catch","error","useEffect","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ef2efe42.chunk.js","sourcesContent":["\nvar colorArray = [\n    \"#FF6633\",\n    \"#FFB399\",\n    \"#FF33FF\",\n    \"#FFFF99\",\n    \"#00B3E6\",\n    \"#E6B333\",\n    \"#3366E6\",\n    \"#999966\",\n    \"#99FF99\",\n    \"#B34D4D\",\n    \"#80B300\",\n    \"#809900\",\n    \"#E6B3B3\",\n    \"#6680B3\",\n    \"#66991A\",\n    \"#FF99E6\",\n    \"#CCFF1A\",\n    \"#FF1A66\",\n    \"#E6331A\",\n    \"#33FFCC\",\n    \"#66994D\",\n    \"#B366CC\",\n    \"#4D8000\",\n    \"#B33300\",\n    \"#CC80CC\",\n    \"#66664D\",\n    \"#991AFF\",\n    \"#E666FF\",\n    \"#4DB3FF\",\n    \"#1AB399\",\n    \"#E666B3\",\n    \"#33991A\",\n    \"#CC9999\",\n    \"#B3B31A\",\n    \"#00E680\",\n    \"#4D8066\",\n    \"#809980\",\n    \"#E6FF80\",\n    \"#1AFF33\",\n    \"#999933\",\n    \"#FF3380\",\n    \"#CCCC00\",\n    \"#66E64D\",\n    \"#4D80CC\",\n    \"#9900B3\",\n    \"#E64D66\",\n    \"#4DB380\",\n    \"#FF4D4D\",\n    \"#99E6E6\",\n    \"#6666FF\"\n  ];\n\n  export default colorArray;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport colorArray from \"./colors.jsx\";\n\n\nconst url_for_coding_quotes = \"https://programming-quotes-api.herokuapp.com/quotes/random/lang/en\";\nvar g_quotes = \"\";\nvar g_author = \"\";\nvar g_coding_quotes = false;\n\n\n\n\n//spinner for loading \nconst spinner = document.getElementById(\"spinner\");\nfunction showSpinner() {\n  spinner.className = \"show\";\n}\n\n//hide spinner \nfunction hideSpinner(){\n  spinner.className = spinner.className.replace(\"show\", \"\");\n}\n\n\n//main ui componenet\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [color, setColor] = useState(\"#00B1E1\");\n\n\nconst style = {\n  backgroundColor: color,\n  height: \"100%\",\n  width: \"100%\"\n};\n\n\n\n//On Quote type button click event \n//if programming \n//or life quotes\nfunction onBtnClick(event){\n  if(event.target.id==\"programing_btn\"){\n    const element = document.getElementById(event.target.id);    \n    g_coding_quotes=true;\n    \n  }else{\n    g_coding_quotes=false;\n  }\n  getAPIResult();\n}\n\n\n  \n\n\n//get the programming quotes\n\n  function getCodingQuotes(){\n    fetch(\"https://programming-quotes-api.herokuapp.com/quotes/random/lang/en\").then(res=> res.json()).then(res=>{\n       g_quotes = res.en;\n       g_author = res.author;\n       setText(g_quotes);\n       setAuthor(g_author);\n\n       var item = colorArray[Math.floor(Math.random() * colorArray.length)];\n       var result = \"\";\n       setColor(item);\n       hideSpinner();\n    })\n  }\n\n  //get the life quotes\n\n  function getNormalQuotes(){\n\n    fetch(\"https://api.quotable.io/random\")\n      .then(res => res.json())\n      .then(res => {\n        hideSpinner();\n        setText(res.content);\n        setAuthor(res.author);\n        var item = colorArray[Math.floor(Math.random() * colorArray.length)];\n        var result = \"\";\n        setColor(item);\n        \n        \n      }).catch(function(error) {\n\n        setText(\"Server error\");\n        setAuthor(\"\");\n    });\n\n  }\n\n  //driver function to fetch quotes programing or life depends on user selection \n\n  function getAPIResult() {\n\n   \n  \n\n    showSpinner();\n    if(g_coding_quotes){\n      getCodingQuotes();\n      \n    }else{\n      getNormalQuotes();\n      //setText(g_quotes);\n      //setAuthor(g_author);\n    }\n    //setColor(item);    \n  }\n\n\n\n\n  useEffect(() => {\n    // Update the document title using the browser API\n\n    if (text != \"\") {\n    } else {\n      getAPIResult();\n    }\n  });\n  const bgcolor = {\n    backgroundColor: { color }\n  };\n  return (\n    <div className=\"container-fluid\" style={style}> \n    <div className=\"row\">\n      <div className=\"col .d-flex mr-md-3 p-3\">\n        <button style={{color:'black'}} id=\"programing_btn\" onClick={(event)=>onBtnClick(event)} className=\"btn btn-outline-primary btn-lg mr-md-3\">Programming Quotes</button>\n        <button style={{color:'black'}} id=\"life_btn\" onClick={(event)=>onBtnClick(event)} className=\"btn btn-outline-primary btn-lg\">Life  Quotes</button>\n      </div>\n    </div>\n     \n      <div className=\"row\" style={{ height: \"95%\", backgroundColor: \"\" }}>\n        <div className=\"col-12\" style={{ textAlign: \"center\" }}>\n          <Quetes\n            name={text}\n            author={author}\n            getAPIResult={getAPIResult}\n            color={color}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\n\n\n//nav bar componenet\nfunction navBar(){\n  return(\n    <div>\n\n    </div>\n  )\n}\n\n\n\n//quotes componenet\n\n\nconst Quetes = ({ name, author, getAPIResult, color }) => {\n  const box_style = {\n    width: \"40%\",\n    height: \"auto\",\n    backgroundColor: \"\",\n    margin: \"0 auto\",\n    position: \"relative\",\n    top: \"20%\",\n    border: \"1px solid #1C6EA4\",\n    borderRadius: \"3px\",\n    backgroundColor: \"#fff\"\n  };\n\n  return (\n    <div className=\"container-fluid\" style={box_style}>\n      <div className=\"row\">\n        <div className=\"col-12\" style={{ height: \"auto\", padding: \"10px\" }}>\n          <i className=\"fa fa-quote-left\"></i>\n          <blockquote\n            style={{ fontWeight: \"500\", fontSize: \"1.5em\", color: color }}\n          >\n            {name}\n          </blockquote>\n          <p style={{ float: \"right\", margin: \"10px\" }}>- {author}</p>\n        </div>\n      </div>\n\n      <div className=\"row\">\n      <div\n        className=\"col-12\"\n        style={{ height: \"auto\", position: \"relative\", float: \"right\" }}\n      >\n        <button\n          style={{\n            margin: \"10px\",\n            display: \"inline\",\n            backgroundColor: color,\n            border: \"none\",\n            color: \"white\",\n            borderRadius: \"3px\",\n            height: \"40px\",\n            width: \"100px\"\n            ,float:\"right\"\n          }}\n          onClick={() => {\n            getAPIResult();\n          }}\n        >\n          New Quote{\" \"}\n        </button>\n\n        <a style={{float:\"left\",margin:\"3px\",position:\"relative\",top:\"38%\"}} className=\"twitter-share-button\"\n  href={`https://twitter.com/intent/tweet?text=\"${name}`}>\nTweet</a>\n      </div>\n\n      </div>\n\n      \n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}